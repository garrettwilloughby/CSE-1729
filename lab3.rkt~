;1a

(define (pell n)
    (cond ((= n 0) 0)
    ((= n 1) 1)
    ((+ (* 2 (pell (- n 1))) (pell (- n 2))))))

;1b

(define (find-pell n)
  (define (helper x n) 
    (cond ((> (pell x) n) (pell (- x 1)))
          (else (helper (+ x 1) n))))
  (helper 0 n))

(find-pell 10)

;1c

(define (comp-pell n)
   (cond ((= n 0) 2)
         ((= n 1) 2)
        ((+ (* 2 (comp-pell (- n 1))) (comp-pell (- n 2))))))



;1d

(define (sqrt-2-approx n)

  (/ (/ (comp-pell n) 2) (pell n)))


;2

(define (viete n)
  (define (help x y)
    (let ((num (sqrt (+ 2 x))))
    (if (> y n)
        1
        (* (/ num 2)
           (help num (+ y 1))))))
        (* (/ (sqrt 2) 2) (help (sqrt 2) 1)))
     
     





;3

(define (new-sqrt x n)
    (define (help a)
      (if (= a 0)
          0
  (/ (- x 1) (+ 2 (help (- a 1))))
    ))
  (+ 1 (help a)))






;4

(define (m91 n)
  (cond ((> n 100) (- n 10))
      ((<= n 100) (m91 (m91(+ n 11))))))




      
;5

(define (iradius A B C)
  (let ((S (/ (+ A B C) 2)))
        (sqrt(/ (* (- S A) (- S B) (- S C)) S))))
    
  





;6

(define (heron a b c)

  (let ((s (* 0.5 (+ a b c))))
(let (

       (sa (- s a))
       (sb (- s b))
       (sc (- s c)))  (sqrt (* s sa sb sc)))))

           
 